(()=>{"use strict";const t=function(t,e){let n=0,i=!1;return{hit:function(){return n+=1,n},getHits:function(){return n},isSunk:function(){return n==t&&(i=!0),i},length:t,shipName:e}},e=function(){let e=function(){let t=[],e=[],n=[],i=[],r=[];function o(t,e){return 10*t+e}function a(t,e,n,r){let a=o(t,e);if("Horizontal"==r)for(let t=0;t<n.length;t++)if(i.includes(a+t))return!1;if("Vertical"==r)for(let t=0;t<n.length;t++)if(i.includes(a+10*t))return!1;return!("Horizontal"==r&&e+n.length>10||"Vertical"==r&&t+n.length>10)}return{createBoard:function(){for(let e=0;e<10;e++)for(let n=0;n<10;n++){let i={coordinates:void 0,name:void 0};i.coordinates=[e,n],i.name=null,t.push(i)}return t},getBoard:function(){return t},checkValidity:a,placeShip:function(e,n,s,c){if("Horizontal"==c&&a(e,n,s,c)){let r=o(e,n);for(let e=0;e<s.length;e++)t[r+e].name=s.shipName,i.push(r+e)}if("Vertical"==c&&a(e,n,s,c)){let r=o(e,n);for(let e=0;e<s.length;e++)t[r+10*e].name=s.shipName,i.push(r+10*e)}r.push(s)},receiveAttack:function(i,a){let s=o(i,a);null!=t[s].name?n.includes(s)||(n.push(s),function(t){for(let e=0;e<r.length;e++)if(r[e].shipName==t)return r[e]}(t[s].name).hit()):e.includes(s)||e.push(s)},isAllSunk:function(){if(i.length==n.length)return!0},getMissedPositions:function(){return e},getAttackedPositions:function(){return n},getShipsPositions:function(){return i}}}(),n=[t(5,"Carrier"),t(4,"Battleship"),t(3,"Cruiser"),t(3,"Submarine"),t(2,"Destroyer")],i=[...e.getAttackedPositions(),...e.getMissedPositions()];function r(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}return{randomAttack:function t(e){let n=r(),i=n[0],o=n[1],a=function(t,e){return 10*t+e}(i,o);e.getShotCoordinates().includes(a)?t(e):(e.receiveAttack(i,o),console.log("test"))},randomPlacement:function t(n){let i=r(),o=i[0],a=i[1],s="";s=1==Math.floor(2*Math.random())?"Horizontal":"Vertical",e.checkValidity(o,a,n,s)?e.placeShip(o,a,n,s):t(n)},getBoard:function(){return e},getShips:function(){return n},getShotCoordinates:function(){return i},createBoard:e.createBoard,getBoard:e.getBoard,placeShip:e.placeShip,checkValidity:e.checkValidity,receiveAttack:e.receiveAttack,isAllSunk:e.isAllSunk,getMissedPositions:e.getMissedPositions,getAttackedPositions:e.getAttackedPositions,getShipsPositions:e.getShipsPositions}},n=function(){let t=e(),n=e();t.createBoard(),n.createBoard();let i=t.getBoard(),r=n.getBoard(),o=t.getShips(),a=n.getShips(),s="gamer",c="",l=[];return{gamer:t,computer:n,setInput:function(t){l=t},gameLoop:function(){"gamer"==s&&(n.receiveAttack(l[0],l[1]),n.isAllSunk()?c="gamer":(s="computer",l=[],console.log(n.getAttackedPositions()),console.log(n.getShipsPositions()))),"computer"==s&&(n.randomAttack(t),t.isAllSunk()?c="computer":(s="gamer",console.log(t.getAttackedPositions()),console.log(t.getShipsPositions()))),console.log(c)},getTurn:function(){return s},getWinner:function(){return c},getGamerBoard:function(){return i},getComputerBoard:function(){return r},getGamerShips:function(){return o},getComputerShips:function(){return a}}}();(function(){const t=document.querySelector(".display"),e=document.querySelector(".player-board"),i=document.querySelector(".computer-board"),r=document.querySelector(".direction");let o=n.getGamerBoard(),a=n.getComputerBoard(),s=[...n.getGamerShips()],c=[...n.getComputerShips()];function l(t){let e=t.classList[1].split(",");return[parseInt(e[0]),parseInt(e[1])]}return window.addEventListener("load",(()=>{t.textContent="Welcome to Battleship. Place your Carrier"})),window.addEventListener("click",(()=>{switch(s.length){case 4:t.textContent="Place your Battleship";break;case 3:t.textContent="Place your Cruiser";break;case 2:t.textContent="Place your Submarine";break;case 1:t.textContent="Place your Destroyer";break;default:t.textContent="hey"}})),function(){let t,i,a=s[0];e.addEventListener("click",(c=>{if(c.target.classList.contains("player-board")){let u=c.target;if(t=l(u)[0],i=l(u)[1],s.length>0&&n.gamer.checkValidity(t,i,a,r.value)){n.gamer.placeShip(t,i,a,r.value),s.shift(),a=s[0];let c=n.gamer.getShipsPositions();for(let t=0;t<c.length;t++)e.children[c[t]].classList.add("player-ship");console.log(o)}}})),e.addEventListener("mouseover",(e=>{if(e.target.classList.contains("grid")){let o=e.target;t=l(o)[0],i=l(o)[1],s.length>0&&n.gamer.checkValidity(t,i,a,r.value)?o.classList.add("green"):s.length>0&&o.classList.add("red")}})),e.addEventListener("mouseout",(t=>{if(t.target.classList.contains("grid")){(e=t.target).classList.remove("green"),e.classList.remove("red")}var e}))}(),r.addEventListener("click",(()=>{"Horizontal"==r.value?(r.value="Vertical",r.textContent="Set Horizontal"):(r.value="Horizontal",r.textContent="Set Vertical")})),function(){let t=c[0];window.addEventListener("load",(()=>{for(;c.length>0;)n.computer.randomPlacement(t),c.shift(),t=c[0];let e=n.computer.getShipsPositions();for(let t=0;t<e.length;t++)i.children[e[t]].classList.add("computer-ship")}))}(),i.addEventListener("click",(t=>{if(0==s.length&&t.target.classList.contains("computer-board")){let e=t.target,i=parseInt(e.classList[0]),r=l(e)[0],o=l(e)[1];n.computer.getShotCoordinates().includes(i)||""!=n.getWinner()||0!=s.length||(n.setInput([r,o]),n.gameLoop())}})),{hideDisplay:function(t){t.classList.remove("show"),t.classList.add("hide")},showDisplay:function(t){t.classList.remove("hide"),t.classList.add("show")},createGameBoards:function(){for(let t=0;t<o.length;t++){let n=document.createElement("div");n.classList.add(t),n.classList.add(o[t].coordinates),n.classList.add("grid"),n.classList.add("player-board"),e.appendChild(n)}for(let t=0;t<a.length;t++){let e=document.createElement("div");e.classList.add(t),e.classList.add(a[t].coordinates),e.classList.add("grid"),e.classList.add("computer-board"),i.appendChild(e)}}}})().createGameBoards()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,