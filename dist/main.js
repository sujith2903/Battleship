(()=>{"use strict";const e=function(e,t){let n=0,r=!1;return{hit:function(){return n+=1,n},getHits:function(){return n},isSunk:function(){return n==e&&(r=!0),r},length:e,shipName:t}},t=function(){let t=function(){let e=[],t=[],n=[],r=[],i=[];function o(e,t){return 10*e+t}function a(e,t,n,i){let a=o(e,t);if("Horizontal"==i)for(let e=0;e<n.length;e++)if(r.includes(a+e))return!1;if("Vertical"==i)for(let e=0;e<n.length;e++)if(r.includes(a+10*e))return!1;return!("Horizontal"==i&&t+n.length>10||"Vertical"==i&&e+n.length>10)}return{createBoard:function(){for(let t=0;t<10;t++)for(let n=0;n<10;n++){let r={coordinates:void 0,name:void 0};r.coordinates=[t,n],r.name=null,e.push(r)}return e},getBoard:function(){return e},checkValidity:a,placeShip:function(t,n,s,c){if("Horizontal"==c&&a(t,n,s,c)){let i=o(t,n);for(let t=0;t<s.length;t++)e[i+t].name=s.shipName,r.push(i+t)}if("Vertical"==c&&a(t,n,s,c)){let i=o(t,n);for(let t=0;t<s.length;t++)e[i+10*t].name=s.shipName,r.push(i+10*t)}i.push(s)},receiveAttack:function(r,a){let s=o(r,a);null!=e[s].name?n.includes(s)||(n.push(s),function(e){for(let t=0;t<i.length;t++)if(i[t].shipName==e)return i[t]}(e[s].name).hit()):t.includes(s)||t.push(s)},isAllSunk:function(){if(r.length==n.length)return!0},getMissedPositions:function(){return t},getAttackedPositions:function(){return n},getShipsPositions:function(){return r}}}(),n=[e(5,"Carrier"),e(4,"Battleship"),e(3,"Cruiser"),e(3,"Submarine"),e(2,"Destroyer")];function r(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}return{randomAttack:function e(t){let n=r(),i=n[0],o=n[1],a=function(e,t){return 10*e+t}(i,o);t.getShotCoordinates().includes(a)?e(t):t.receiveAttack(i,o)},randomPlacement:function e(n){let i=r(),o=i[0],a=i[1],s="";s=1==Math.floor(2*Math.random())?"Horizontal":"Vertical",t.checkValidity(o,a,n,s)?t.placeShip(o,a,n,s):e(n)},getBoard:function(){return t},getShips:function(){return n},getShotCoordinates:function(){return[...t.getAttackedPositions(),...t.getMissedPositions()]},createBoard:t.createBoard,getBoard:t.getBoard,placeShip:t.placeShip,checkValidity:t.checkValidity,receiveAttack:t.receiveAttack,isAllSunk:t.isAllSunk,getMissedPositions:t.getMissedPositions,getAttackedPositions:t.getAttackedPositions,getShipsPositions:t.getShipsPositions}},n=function(){let e=t(),n=t();e.createBoard(),n.createBoard();let r=e.getBoard(),i=n.getBoard(),o=e.getShips(),a=n.getShips(),s="Gamer",c="",l=[];return{gamer:e,computer:n,setInput:function(e){l=e},gameLoop:function(){"Gamer"==s&&(n.receiveAttack(l[0],l[1]),n.isAllSunk()?c="Gamer":(s="Computer",l=[])),"Computer"==s&&(n.randomAttack(e),e.isAllSunk()?c="Computer":s="Gamer"),console.log(c)},getTurn:function(){return s},getWinner:function(){return c},getGamerBoard:function(){return r},getComputerBoard:function(){return i},getGamerShips:function(){return o},getComputerShips:function(){return a}}}(),r=function(){const e=document.querySelector(".display"),t=document.querySelector(".player-board"),i=document.querySelector(".computer-board"),o=document.querySelector(".direction"),a=document.querySelector(".reset");let s=n.getGamerBoard(),c=n.getComputerBoard(),l=[...n.getGamerShips()],d=[...n.getComputerShips()];function u(e){let t=e.classList[1].split(",");return[parseInt(t[0]),parseInt(t[1])]}return window.addEventListener("load",(()=>{e.textContent="Welcome to Battleship. Place your Carrier"})),window.addEventListener("click",(()=>{switch(l.length){case 4:e.textContent="Place your Battleship";break;case 3:e.textContent="Place your Cruiser";break;case 2:e.textContent="Place your Submarine";break;case 1:e.textContent="Place your Destroyer";break;case 0:""==n.getWinner()?e.textContent=`${n.getTurn()}'s Turn`:e.textContent=`${n.getWinner()} Won`}})),function(){let e,r,i=l[0];t.addEventListener("click",(a=>{if(a.target.classList.contains("player-board")){let c=a.target;if(e=u(c)[0],r=u(c)[1],l.length>0&&n.gamer.checkValidity(e,r,i,o.value)){n.gamer.placeShip(e,r,i,o.value),l.shift(),i=l[0];let a=n.gamer.getShipsPositions();for(let e=0;e<a.length;e++)t.children[a[e]].classList.add("player-ship");console.log(s)}}})),t.addEventListener("mouseover",(t=>{if(t.target.classList.contains("grid")){let a=t.target;e=u(a)[0],r=u(a)[1],l.length>0&&n.gamer.checkValidity(e,r,i,o.value)?a.classList.add("green"):l.length>0&&a.classList.add("red")}})),t.addEventListener("mouseout",(e=>{if(e.target.classList.contains("grid")){(t=e.target).classList.remove("green"),t.classList.remove("red")}var t}))}(),o.addEventListener("click",(()=>{"Horizontal"==o.value?(o.value="Vertical",o.textContent="Set Horizontal"):(o.value="Horizontal",o.textContent="Set Vertical")})),function(){let e=d[0];window.addEventListener("click",(()=>{for(;d.length>0;)n.computer.randomPlacement(e),d.shift(),e=d[0];let t=n.computer.getShipsPositions();for(let e=0;e<t.length;e++)i.children[t[e]].classList.add("computer-ship")}))}(),i.addEventListener("click",(e=>{if(0==l.length&&e.target.classList.contains("computer-board")){let t=e.target,r=parseInt(t.classList[0]),i=u(t)[0],o=u(t)[1];n.computer.getShotCoordinates().includes(r)||""!=n.getWinner()||0!=l.length||(n.setInput([i,o]),n.gameLoop())}})),window.addEventListener("click",(()=>{let e=n.gamer.getMissedPositions(),r=n.computer.getMissedPositions(),o=n.gamer.getAttackedPositions(),a=n.computer.getAttackedPositions();for(let n=0;n<e.length;n++)t.children[e[n]].classList.add("missed");for(let e=0;e<r.length;e++)i.children[r[e]].classList.add("missed");for(let e=0;e<o.length;e++)t.children[o[e]].classList.add("attacked");for(let e=0;e<a.length;e++)i.children[a[e]].classList.add("attacked")})),a.addEventListener("click",(()=>{for(;t.hasChildNodes();)t.removeChild(t.firstChild);for(;i.hasChildNodes();)i.removeChild(i.firstChild);r.createGameBoards()})),{createGameBoards:function(){for(let e=0;e<s.length;e++){let n=document.createElement("div");n.classList.add(e),n.classList.add(s[e].coordinates),n.classList.add("grid"),n.classList.add("player-board"),t.appendChild(n)}for(let e=0;e<c.length;e++){let t=document.createElement("div");t.classList.add(e),t.classList.add(c[e].coordinates),t.classList.add("grid"),t.classList.add("computer-board"),i.appendChild(t)}}}}();r.createGameBoards()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,