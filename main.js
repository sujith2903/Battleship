(()=>{"use strict";const e=function(e,t){let n=0,r=!1;return{hit:function(){return n+=1,n},getHits:function(){return n},isSunk:function(){return n==e&&(r=!0),r},length:e,shipName:t}},t=function(){let t=function(){let e=[],t=[],n=[],r=[],i=[];function o(e,t){return 10*e+t}function a(e,t,n,i){let a=o(e,t);if("Horizontal"==i)for(let e=0;e<n.length;e++)if(r.includes(a+e))return!1;if("Vertical"==i)for(let e=0;e<n.length;e++)if(r.includes(a+10*e))return!1;return!("Horizontal"==i&&t+n.length>10||"Vertical"==i&&e+n.length>10)}return{createBoard:function(){for(let t=0;t<10;t++)for(let n=0;n<10;n++){let r={coordinates:void 0,name:void 0};r.coordinates=[t,n],r.name=null,e.push(r)}return e},getBoard:function(){return e},checkValidity:a,placeShip:function(t,n,s,l){if("Horizontal"==l&&a(t,n,s,l)){let i=o(t,n);for(let t=0;t<s.length;t++)e[i+t].name=s.shipName,r.push(i+t),console.log(r)}if("Vertical"==l&&a(t,n,s,l)){let i=o(t,n);for(let t=0;t<s.length;t++)e[i+10*t].name=s.shipName,r.push(i+10*t),console.log(r)}i.push(s)},receiveAttack:function(r,a){let s=o(r,a);null!=e[s].name?(n.push(s),function(e){for(let t=0;t<i.length;t++)if(i[t].shipName==e)return i[t]}(e[s].name).hit()):t.push(s)},isAllSunk:function(){if(r.length==n.length)return!0},getMissedPositions:function(){return t},getAttackedPositions:function(){return n},getShipsPositions:function(){return r}}}(),n=[e(5,"Carrier"),e(4,"Battleship"),e(3,"Cruiser"),e(3,"Submarine"),e(2,"Destroyer")],r=[...t.getAttackedPositions(),...t.getMissedPositions()];function i(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}return{randomAttack:i,randomPlacement:function e(n){let r=i(),o=r[0],a=r[1],s="";s=1==Math.floor(2*Math.random())?"Horizontal":"Vertical",t.checkValidity(o,a,n,s)?t.placeShip(o,a,n,s):e(n)},getBoard:function(){return t},getShips:function(){return n},getShotCoordinates:function(){return r},createBoard:t.createBoard,getBoard:t.getBoard,placeShip:t.placeShip,checkValidity:t.checkValidity,receiveAttack:t.receiveAttack,isAllSunk:t.isAllSunk,getMissedPositions:t.getMissedPositions,getAttackedPositions:t.getAttackedPositions,getShipsPositions:t.getShipsPositions}},n=function(){let e=t(),n=t();e.createBoard(),n.createBoard();let r=e.getBoard(),i=n.getBoard(),o=e.getShips(),a=n.getShips(),s="gamer",l="";return{gamer:e,computer:n,gameLoop:function(e,r){"gamer"==s?(n.receiveAttack(e,r),n.isAllSunk()?l="gamer":s="computer"):"computer"==s&&(t.receiveAttack(e,r),t.isAllSunk()?l="computer":s="gamer")},getWinner:function(){return l},getGamerBoard:function(){return r},getComputerBoard:function(){return i},getGamerShips:function(){return o},getComputerShips:function(){return a}}}();(function(){const e=document.querySelector(".display"),t=document.querySelector(".player-board"),r=document.querySelector(".computer-board"),i=document.querySelector(".direction");let o=n.getGamerBoard(),a=n.getComputerBoard(),s=[...n.getGamerShips()],l=[...n.getComputerShips()];function c(e){let t=e.classList[1].split(",");return[parseInt(t[0]),parseInt(t[1])]}return window.addEventListener("load",(()=>{e.textContent="Welcome to Battleship. Place your Carrier"})),window.addEventListener("click",(()=>{switch(s.length){case 4:e.textContent="Place your Battleship";break;case 3:e.textContent="Place your Cruiser";break;case 2:e.textContent="Place your Submarine";break;case 1:e.textContent="Place your Destroyer";break;default:e.textContent="hey"}})),function(){let e,r,a=s[0];t.addEventListener("click",(l=>{if(l.target.classList.contains("player-board")){let d=l.target;if(e=c(d)[0],r=c(d)[1],s.length>0&&n.gamer.checkValidity(e,r,a,i.value)){n.gamer.placeShip(e,r,a,i.value),s.shift(),a=s[0];let l=n.gamer.getShipsPositions();for(let e=0;e<l.length;e++)t.children[l[e]].classList.add("player-ship");console.log(o)}}})),t.addEventListener("mouseover",(t=>{if(t.target.classList.contains("grid")){let o=t.target;e=c(o)[0],r=c(o)[1],s.length>0&&n.gamer.checkValidity(e,r,a,i.value)?o.classList.add("green"):s.length>0&&o.classList.add("red")}})),t.addEventListener("mouseout",(e=>{if(e.target.classList.contains("grid")){(t=e.target).classList.remove("green"),t.classList.remove("red")}var t}))}(),i.addEventListener("click",(()=>{"Horizontal"==i.value?(i.value="Vertical",i.textContent="Set Horizontal"):(i.value="Horizontal",i.textContent="Set Vertical")})),function(){let e=l[0];window.addEventListener("load",(()=>{for(;l.length>0;)n.computer.randomPlacement(e),l.shift(),e=l[0];let t=n.computer.getShipsPositions();for(let e=0;e<t.length;e++)r.children[t[e]].classList.add("computer-ship");console.log(a)}))}(),{hideDisplay:function(e){e.classList.remove("show"),e.classList.add("hide")},showDisplay:function(e){e.classList.remove("hide"),e.classList.add("show")},createGameBoards:function(){for(let e=0;e<o.length;e++){let n=document.createElement("div");n.classList.add(e),n.classList.add(o[e].coordinates),n.classList.add("grid"),n.classList.add("player-board"),t.appendChild(n)}for(let e=0;e<a.length;e++){let t=document.createElement("div");t.classList.add(e),t.classList.add(a[e].coordinates),t.classList.add("grid"),t.classList.add("computer-board"),r.appendChild(t)}}}})().createGameBoards()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,