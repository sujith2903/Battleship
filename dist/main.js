(()=>{"use strict";const t=function(t,e){let n=0,r=!1;return{hit:function(){return n+=1,n},getHits:function(){return n},isSunk:function(){return n==t&&(r=!0),r},length:t,shipName:e}},e=function(){let e=function(){let t=[],e=[],n=[],r=[],i=[];function a(t,e){return 10*t+e}function o(t,e,n,i){let o=a(t,e);if("Horizontal"==i)for(let t=0;t<n.length;t++)if(r.includes(o+t))return!1;if("Vertical"==i)for(let t=0;t<n.length;t++)if(r.includes(o+10*t))return!1;return!("Horizontal"==i&&e+n.length>10||"Vertical"==i&&t+n.length>10)}return{createBoard:function(){for(let e=0;e<10;e++)for(let n=0;n<10;n++){let r={coordinates:void 0,name:void 0};r.coordinates=[e,n],r.name=null,t.push(r)}return t},getBoard:function(){return t},checkValidity:o,placeShip:function(e,n,s,l){if("Horizontal"==l&&o(e,n,s,l)){let i=a(e,n);for(let e=0;e<s.length;e++)t[i+e].name=s.shipName,r.push(i+e),console.log(r)}if("Vertical"==l&&o(e,n,s,l)){let i=a(e,n);for(let e=0;e<s.length;e++)t[i+10*e].name=s.shipName,r.push(i+10*e),console.log(r)}i.push(s)},receiveAttack:function(r,o){let s=a(r,o);return null!=t[s].name?(n.push(s),function(t){for(let e=0;e<i.length;e++)if(i[e].shipName==t)return i[e]}(t[s].name).hit()):e.push(s),s},isAllSunk:function(){if(r.length==n.length)return!0},getMissedPositions:function(){return e},getAttackedPositions:function(){return n},getShipsPositions:function(){return r}}}(),n=[t(5,"Carrier"),t(4,"Battleship"),t(3,"Cruiser"),t(3,"Submarine"),t(2,"Destroyer")],r=[];return{randomAttack:function(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]},getBoard:function(){return e},getShips:function(){return n},getShotCoordinates:function(){return r},createBoard:e.createBoard,getBoard:e.getBoard,placeShip:e.placeShip,checkValidity:e.checkValidity,receiveAttack:e.receiveAttack,isAllSunk:e.isAllSunk,getMissedPositions:e.getMissedPositions,getAttackedPositions:e.getAttackedPositions,getShipsPositions:e.getShipsPositions}},n=function(){let t=e(),n=e();t.createBoard(),n.createBoard();let r=t.getBoard(),i=n.getBoard(),a=t.getShips(),o=n.getShips();return{gamer:t,computer:n,getGamerBoard:function(){return r},getComputerBoard:function(){return i},getGamerShips:function(){return a},getComputerShips:function(){return o}}}();(function(){const t=document.querySelector(".display"),e=document.querySelector(".player-board"),r=document.querySelector(".computer-board"),i=document.querySelector(".direction");let a=n.getGamerBoard(),o=n.getComputerBoard(),s=[...n.getGamerShips()];function l(t){let e=t.classList[1].split(",");return[parseInt(e[0]),parseInt(e[1])]}return n.getComputerShips(),window.addEventListener("load",(()=>{t.textContent="Welcome to Battleship. Place your Carrier"})),window.addEventListener("click",(()=>{switch(s.length){case 4:t.textContent="Place your Battleship";break;case 3:t.textContent="Place your Cruiser";break;case 2:t.textContent="Place your Submarine";break;case 1:t.textContent="Place your Destroyer";break;default:t.textContent="hey"}})),function(){let t,r,o=s[0];e.addEventListener("click",(c=>{if(c.target.classList.contains("player-board")){let u=c.target;if(t=l(u)[0],r=l(u)[1],s.length>0&&n.gamer.checkValidity(t,r,o,i.value)){n.gamer.placeShip(t,r,o,i.value),s.shift(),o=s[0];let l=n.gamer.getShipsPositions();for(let t=0;t<l.length;t++)e.children[l[t]].classList.add("ship");console.log(a)}}})),e.addEventListener("mouseover",(e=>{if(e.target.classList.contains("grid")){let a=e.target;t=l(a)[0],r=l(a)[1],s.length>0&&n.gamer.checkValidity(t,r,o,i.value)?a.classList.add("green"):s.length>0&&a.classList.add("red")}})),e.addEventListener("mouseout",(t=>{if(t.target.classList.contains("grid")){(e=t.target).classList.remove("green"),e.classList.remove("red")}var e}))}(),i.addEventListener("click",(()=>{"Horizontal"==i.value?(i.value="Vertical",i.textContent="Set Horizontal"):(i.value="Horizontal",i.textContent="Set Vertical")})),{hideDisplay:function(t){t.classList.remove("show"),t.classList.add("hide")},showDisplay:function(t){t.classList.remove("hide"),t.classList.add("show")},createGameBoards:function(){for(let t=0;t<a.length;t++){let n=document.createElement("div");n.classList.add(t),n.classList.add(a[t].coordinates),n.classList.add("grid"),n.classList.add("player-board"),e.appendChild(n)}for(let t=0;t<o.length;t++){let e=document.createElement("div");e.classList.add(t),e.classList.add(o[t].coordinates),e.classList.add("grid"),e.classList.add("computer-board"),r.appendChild(e)}}}})().createGameBoards()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,